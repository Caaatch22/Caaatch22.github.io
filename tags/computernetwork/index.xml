<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ComputerNetwork on Mingjie&#39;s Home</title>
    <link>https://caaatch22.github.io/tags/computernetwork/</link>
    <description>Recent content in ComputerNetwork on Mingjie&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Mar 2023 19:34:21 +0000</lastBuildDate><atom:link href="https://caaatch22.github.io/tags/computernetwork/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>轻量级高并发网络库&#43;httpserver</title>
      <link>https://caaatch22.github.io/posts/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BA%93-httpserver/</link>
      <pubDate>Wed, 01 Mar 2023 19:34:21 +0000</pubDate>
      
      <guid>https://caaatch22.github.io/posts/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BA%93-httpserver/</guid>
      <description>本博客部署在两个服务器上，其中一个的 HTTP 服务就是由本文介绍的 FalconLink 提供。你可以通过IP地址 101.34.211.126:20080 尝试访问。 项目地址 https://github.com/caaatch22/FalconLink
Overview FalconLink是一个轻量级的高并发网络库。它封装了网络编程套接字API，将其抽象成一个易用，可拓展框架。用户只需通过设置回调函数的形式注入业务逻辑。它同时也具有 HTTP 服务请求与解析的功能。
上图是FalconLink系统架构的一个简单概括性图示。
采用非阻塞socket配合边缘触发，及one loop per thread的主从 reactor设计 Acceptor 是专门用于处理接受新用户连接请求的模块。它守候在监听端口。收到请求后建立 Connection 分配给 EventLoop。 FalconLink 将每个 TCP连接抽象成一个 Connection，一个 Connection对应一个连接 socket 套接字。用户可以为每一条Connection注册回调函数。 每个 EventLoop 都拥有一个 Poller。 Poller 负责监听已连接的套接字，将有事件触发的连接反馈给 EventLoop。 EventLoop是该系统的核心组件, 每个都单独运行在一个线程中. 它从 Poller 中接收到有事件触发的用户连接后, 会获取并执行它们的回调函数. ThreadPool 线程池管理着系统中有多少个 EventLoop 在运行，并调度线程，防止注册过多线程导致性能下降。 支持 HTTP(GET,HEAD)请求的解析与回复，支持挂载静态 html 文件（本博客使用FalconLink的 HTTP 服务） 实现异步logger API 使用falconlink，可以轻易且优雅的在20行内实现一个 echo server。
#include &amp;#34;falconlink.hpp&amp;#34; int main() { falconlink::InetAddr local_address(&amp;#34;0.0.0.0&amp;#34;, 8090); falconlink::Server echo_server(local_address); echo_server .</description>
      <content:encoded><![CDATA[<blockquote>
<p>本博客部署在两个服务器上，其中一个的 HTTP 服务就是由本文介绍的 FalconLink 提供。你可以通过IP地址 101.34.211.126:20080 尝试访问。 项目地址 <a href="https://github.com/caaatch22/FalconLink">https://github.com/caaatch22/FalconLink</a></p>
</blockquote>
<h2 id="overview">Overview</h2>
<p><strong>FalconLink</strong>是一个轻量级的高并发网络库。它封装了网络编程套接字API，将其抽象成一个易用，可拓展框架。用户只需通过设置回调函数的形式注入业务逻辑。它同时也具有 HTTP 服务请求与解析的功能。</p>
<p><img loading="lazy" src="/img/FalconLink/falconlink-architecture.png" alt=""  />
</p>
<p>上图是FalconLink系统架构的一个简单概括性图示。</p>
<ul>
<li>采用<strong>非阻塞socket</strong>配合<strong>边缘触发</strong>，及<em>one loop per thread</em>的主从 <code>reactor</code>设计</li>
<li><code>Acceptor</code> 是专门用于处理接受新用户连接请求的模块。它守候在监听端口。收到请求后建立 <code>Connection</code> 分配给 EventLoop。</li>
<li>FalconLink 将每个 TCP连接抽象成一个 <code>Connection</code>，一个 <code>Connection</code>对应一个连接 socket 套接字。用户可以为每一条Connection注册回调函数。</li>
<li>每个 <code>EventLoop</code> 都拥有一个 <code>Poller</code>。 <code>Poller</code> 负责监听已连接的套接字，将有事件触发的连接反馈给 <code>EventLoop</code>。</li>
<li><code>EventLoop</code>是该系统的核心组件, 每个都单独运行在一个线程中. 它从 <code>Poller</code> 中接收到有事件触发的用户连接后, 会获取并执行它们的回调函数.</li>
<li><code>ThreadPool</code> 线程池管理着系统中有多少个 <code>EventLoop</code> 在运行，并调度线程，防止注册过多线程导致性能下降。</li>
<li>支持 HTTP(GET,HEAD)请求的解析与回复，支持挂载静态 html 文件（本博客使用FalconLink的 HTTP 服务）</li>
<li>实现异步logger</li>
</ul>
<h2 id="api">API</h2>
<p>使用falconlink，可以轻易且优雅的在20行内实现一个 <code>echo server</code>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;falconlink.hpp&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  falconlink<span style="color:#f92672">::</span>InetAddr local_address(<span style="color:#e6db74">&#34;0.0.0.0&#34;</span>, <span style="color:#ae81ff">8090</span>);
</span></span><span style="display:flex;"><span>  falconlink<span style="color:#f92672">::</span>Server echo_server(local_address);
</span></span><span style="display:flex;"><span>  echo_server
</span></span><span style="display:flex;"><span>      .onHandle([<span style="color:#f92672">&amp;</span>](falconlink<span style="color:#f92672">::</span>Connection<span style="color:#f92672">*</span> client_conn) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> from_fd <span style="color:#f92672">=</span> client_conn<span style="color:#f92672">-&gt;</span>fd();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">auto</span> [read, exit] <span style="color:#f92672">=</span> client_conn<span style="color:#f92672">-&gt;</span>recv();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (exit) {
</span></span><span style="display:flex;"><span>          client_conn<span style="color:#f92672">-&gt;</span>getEventLoop()<span style="color:#f92672">-&gt;</span>deleteConnection(from_fd);
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// client_conn ptr is invalid below here, do not touch it again
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 只有以下四行是业务逻辑
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (read) {
</span></span><span style="display:flex;"><span>          client_conn<span style="color:#f92672">-&gt;</span>WriteToWriteBuffer(client_conn<span style="color:#f92672">-&gt;</span>ReadAsString());
</span></span><span style="display:flex;"><span>          client_conn<span style="color:#f92672">-&gt;</span>send();
</span></span><span style="display:flex;"><span>          client_conn<span style="color:#f92672">-&gt;</span>clearReadBuffer();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      })
</span></span><span style="display:flex;"><span>      .start();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="build--test">Build &amp; Test</h2>
<p>将代码 clone 到本地，进入主目录</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo sh ./build_support/pachages.sh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mkdir build
</span></span><span style="display:flex;"><span>cd build
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cmake ..  <span style="color:#75715e"># Debug mode by default</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or </span>
</span></span><span style="display:flex;"><span>cmake -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span>Release .. <span style="color:#75715e"># to use release mode</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>make
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># test</span>
</span></span><span style="display:flex;"><span>make build-tests
</span></span><span style="display:flex;"><span>make test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or you can test each file</span>
</span></span><span style="display:flex;"><span>make xxx_test
</span></span><span style="display:flex;"><span>./test/xxx_test
</span></span></code></pre></div><h2 id="http-service">http service</h2>
<p>你可以进行使用 falconlink 搭建自己的 http 服务器。
在 <code>build</code> 目录下 <code>make http_server</code>，然后运行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>./bin/http_server <span style="color:#f92672">[</span>optional: port default<span style="color:#f92672">=</span>8090<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>optional:directory 
</span></span><span style="display:flex;"><span>default<span style="color:#f92672">=</span>../examples/http_server/http_resource/<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>你可以替换自行 <code>http_resource</code>中的文件，并在浏览器中输入 <code>localhost:{port}</code>查看</p>
<h2 id="benchmark">Benchmark</h2>
<p>使用 <code>webbench</code>进行压力测试</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>make benchmark
</span></span></code></pre></div><ul>
<li>
<p><strong>硬件</strong>:</p>
<ul>
<li>Intel(R) Xeon(R) Gold 6148 CPU @ 2.40GHz</li>
<li>OS:Ubuntu 20.04 LTS,</li>
<li>4 核 CPU， 16GiB内存， 100GiB磁盘存储。</li>
</ul>
</li>
<li>
<p><strong>QPS</strong>: <strong>40K</strong></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>cs144-note1</title>
      <link>https://caaatch22.github.io/posts/cs144-note1/</link>
      <pubDate>Mon, 09 May 2022 22:35:22 +0000</pubDate>
      
      <guid>https://caaatch22.github.io/posts/cs144-note1/</guid>
      <description>Computer Network introduction dominant model : bidirectional, reliable byte stream connection
http: hypertext transfer protocol : designed to be a document centric way for programs to communicate. Client &amp;mdash;&amp;gt; Server model
Bit-Torrent: (peer-to-peer model) a client requests document from other clients, a single client can request from many others. these collections of collaborating clients are called swarms when a client wants to downloads a file, it first find torrent, usually using www and download using http.</description>
      <content:encoded><![CDATA[<h1 id="computer-network">Computer Network</h1>
<h2 id="introduction">introduction</h2>
<p>dominant model : bidirectional, reliable byte stream connection</p>
<ul>
<li>
<p><strong>http</strong>: hypertext transfer protocol : designed to be a document centric way for programs to communicate.
Client  &mdash;&gt;  Server  model</p>
</li>
<li>
<p><strong>Bit-Torrent</strong>: (peer-to-peer model) a client requests document from other clients, a single client can request from many others.
these collections of collaborating clients are called <strong>swarms</strong>
when a client wants to downloads a file, it first find <code>torrent</code>, usually using www and download using http.
<strong>torrent</strong> file describes information about data file, also tells bit-torrent about the <strong>tracker</strong> (a node keeps track names of clients of the swarm)</p>
</li>
<li>
<p><strong>skype</strong>: client &lt;&ndash;NAT&ndash;&gt;client   two clients request data from each other</p>
<p><em>NAT</em> : network address translator
if you&rsquo;re <em>behind a NAT</em>, you can open connections out to the internet, but other nodes on the internet can&rsquo;t easily open connections to you.</p>
</li>
</ul>
<h2 id="the-4-layer-internet-model">The 4 layer Internet Model</h2>
<h3 id="network-layer-and-link-layer">Network layer and link layer</h3>
<!-- raw HTML omitted -->
<p>data is delivered in <strong>packets</strong>
a packet is a self-contained unit consisting of the data we want to be delivered.</p>
<p>link layer&rsquo;s job is  to carry the data over one link  at a time.
<code>ethernet</code> and <code>wifi</code> &ndash;&gt; two examples of different links layers</p>
<p>Network layer&rsquo;s job is to deliver packets end to end across the internet.
<strong>a packet is a collection data with header</strong>.
<!-- raw HTML omitted --></p>
<p>network layer packet are called <code>datagram</code>.</p>
<p><img loading="lazy" src="/img/cs144%5cNetwork_link.png" alt=""  />
</p>
<h3 id="the-network-layer--is-special">The network layer  is &ldquo;special&rdquo;</h3>
<p>we must use the internet Protocol (IP)</p>
<ul>
<li>IP makes a best-effort attempt to deliver our datagrams to the other end. <strong>But it make no promise</strong></li>
<li>IP datagrams can get lost, delivered out of order, and be corrupted. <strong>No guarantees</strong>.</li>
</ul>
<h3 id="transport-layer">Transport layer</h3>
<p>the most common transport layer is <strong>TCP</strong> (transmission control protocol)</p>
<ul>
<li>guarantee correct in-order delivery of data</li>
</ul>
<p>some applications doesn&rsquo;t need reliable delivery, it can use <strong>UDP</strong> (user datagram protocol).</p>
<ul>
<li>an alternative transport layer that bundles up application data and hands it to the network layer</li>
<li>it offers no delivery guarantees at all</li>
</ul>
<h3 id="application">Application</h3>
<p>they have their own protocol to define the syntax and semantics of data flowing between two end points
(e.g. http, bit-torrent)</p>
<h3 id="others">others</h3>
<!-- raw HTML omitted -->
<h2 id="ip-service-model">IP Service model</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>behavior</th>
</tr>
</thead>
<tbody>
<tr>
<td>Datagram</td>
<td>Individually routed packets.</td>
</tr>
<tr>
<td>Unreliable</td>
<td>packet might be dropped</td>
</tr>
<tr>
<td>Best effort</td>
<td>only if necessary</td>
</tr>
<tr>
<td>Connectionless</td>
<td>No per-flow state.</td>
</tr>
</tbody>
</table>
<p><strong>IP is &ldquo;simple&rdquo;</strong></p>
<ul>
<li>faster, lower cost to build and maintain</li>
<li>The end-to-end principle</li>
<li>allows a variety of reliable (or unreliable) service to be built on top</li>
<li>make very few assumptions about link layer</li>
</ul>
<p><strong>IP Service Model</strong></p>
<ol>
<li>Tried to prevent packets looping forever
add a hop count field in the header of every datagram (<code>ttl</code>:time to live), start at a number like 128, decremented by every router passes through, when it reaches 0, IP think it be stuck in a loop then drop it.</li>
<li>will fragment packets if they are too long.
bc most links have a limit on the size of packets.(ethernet &ndash; 1500bytes)</li>
<li>uses a header checksum to reduce chances of delivering datagram to wrong destination.</li>
<li>allows for new version of IP
<ul>
<li>IPv4     32 bit addresses</li>
<li>IPv6     128 bit addresses</li>
</ul>
</li>
<li>allows for new options to be added to header</li>
</ol>
<!-- raw HTML omitted -->
<h2 id="life-of-a-packet">Life of a Packet</h2>
<h3 id="three-way-handshake">three-way handshake</h3>
<ol>
<li>
<p>Client &mdash;&ndash;sends a synchronized message(同步信息)&mdash;&ndash;&gt; Server   (synchronize, <strong>SYN</strong>)</p>
</li>
<li>
<p>Server &mdash;&ndash;responds with a synchronized message and also acknowledges the client synchronize&mdash;-&gt; Client   (synchronize and acknowledge, <strong>SYN/ACK</strong>)</p>
</li>
<li>
<p>Client &mdash;&ndash;responds by acknowledging the server synchronized &mdash;-&gt; Server   (acknowledge, <strong>ACK</strong>)</p>
</li>
</ol>
<p>IP addressed:  like computer addresses.
TCP port: tells which applications to deliver data to.</p>
<p>Web Server usually run on tcp port 80.</p>
<p><img loading="lazy" src="/img/cs144/inside-the-stream.png" alt=""  />
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
