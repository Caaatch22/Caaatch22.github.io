<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cpp on Mingjie&#39;s Home</title>
    <link>https://caaatch22.github.io/tags/cpp/</link>
    <description>Recent content in Cpp on Mingjie&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 17 Oct 2023 23:38:14 +0000</lastBuildDate><atom:link href="https://caaatch22.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Back to Basics -- c&#43;&#43; move sematics</title>
      <link>https://caaatch22.github.io/posts/back2basics-cpp-move-sematic/</link>
      <pubDate>Tue, 17 Oct 2023 23:38:14 +0000</pubDate>
      
      <guid>https://caaatch22.github.io/posts/back2basics-cpp-move-sematic/</guid>
      <description>&lt;p&gt;1.3 Copying as a Fallback&lt;/p&gt;
&lt;p&gt;1.4 &lt;code&gt;const&lt;/code&gt; Return Values
const std::string get_value();不再是guideline，因为&lt;code&gt;const&lt;/code&gt; disables 移动语义
例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string getValue();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; coll;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;coll.push_back(getValue()); &lt;span style=&#34;color:#75715e&#34;&gt;// copies(because the return value is const)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string getValue(); &lt;span style=&#34;color:#75715e&#34;&gt;// BAD: disables move semantics for return values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; getRef(); &lt;span style=&#34;color:#75715e&#34;&gt;// OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; getPtr(); &lt;span style=&#34;color:#75715e&#34;&gt;// OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Move semantics allows us to optimize the copying of objects, where we no longer need the value. It can be used implicitly (for unnamed temporary objects or local return values) or explicitly (with std::move()).&lt;/li&gt;
&lt;li&gt;std::move() means I no longer need this value here. It marks the object as movable. An object marked with std::move() is not (partially) destroyed (the destructor still will be called).&lt;/li&gt;
&lt;li&gt;By declaring a function with a non-const rvalue reference (such as std::string&amp;amp;&amp;amp;), you define an interface where the caller semantically claims that it no longer needs the passed value. The implementer of the function can use this information to optimize its task by “stealing” the value or do any other modification with the passed argument. Usually, the implementer also has to ensure that the passed argument is in a valid state after the call.&lt;/li&gt;
&lt;li&gt;Moved-from objects of the C++ standard library are still valid objects, but you no longer know their value.&lt;/li&gt;
&lt;li&gt;Copy semantics is used as a fallback for move semantics (if copy semantics is supported). If there is no implementation taking an rvalue reference, any implementation taking an ordinary const lvalue reference (such as const std::string&amp;amp;) is used. This fallback is then used even if the object is explicitly marked with std::move().&lt;/li&gt;
&lt;li&gt;Calling std::move() for a const object usually has no effect.&lt;/li&gt;
&lt;li&gt;If you return by value (not by reference), do not declare the return value as a whole to be const.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moved-from objects
&lt;strong&gt;Valid but Unspecified State&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>1.3 Copying as a Fallback</p>
<p>1.4 <code>const</code> Return Values
const std::string get_value();不再是guideline，因为<code>const</code> disables 移动语义
例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string getValue();
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> coll;
</span></span><span style="display:flex;"><span>coll.push_back(getValue()); <span style="color:#75715e">// copies(because the return value is const)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string getValue(); <span style="color:#75715e">// BAD: disables move semantics for return values
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span> getRef(); <span style="color:#75715e">// OK
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> std<span style="color:#f92672">::</span>string<span style="color:#f92672">*</span> getPtr(); <span style="color:#75715e">// OK
</span></span></span></code></pre></div><h4 id="summary">Summary</h4>
<ul>
<li>Move semantics allows us to optimize the copying of objects, where we no longer need the value. It can be used implicitly (for unnamed temporary objects or local return values) or explicitly (with std::move()).</li>
<li>std::move() means I no longer need this value here. It marks the object as movable. An object marked with std::move() is not (partially) destroyed (the destructor still will be called).</li>
<li>By declaring a function with a non-const rvalue reference (such as std::string&amp;&amp;), you define an interface where the caller semantically claims that it no longer needs the passed value. The implementer of the function can use this information to optimize its task by “stealing” the value or do any other modification with the passed argument. Usually, the implementer also has to ensure that the passed argument is in a valid state after the call.</li>
<li>Moved-from objects of the C++ standard library are still valid objects, but you no longer know their value.</li>
<li>Copy semantics is used as a fallback for move semantics (if copy semantics is supported). If there is no implementation taking an rvalue reference, any implementation taking an ordinary const lvalue reference (such as const std::string&amp;) is used. This fallback is then used even if the object is explicitly marked with std::move().</li>
<li>Calling std::move() for a const object usually has no effect.</li>
<li>If you return by value (not by reference), do not declare the return value as a whole to be const.</li>
</ul>
<p>Moved-from objects
<strong>Valid but Unspecified State</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>foo(std<span style="color:#f92672">::</span>move(s)); <span style="color:#75715e">// keeps s in a valid but unclear state
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> s <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>; <span style="color:#75715e">// OK (don’t know which value is written)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> s.size() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>; <span style="color:#75715e">// OK (writes current number of characters)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> s[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>; <span style="color:#75715e">// ERROR (potentially undefined behavior)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> s.front() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#39;\n&#39;</span>; <span style="color:#75715e">// ERROR (potentially undefined behavior)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;new value&#34;</span>; <span style="color:#75715e">// OK
</span></span></span></code></pre></div><p>有什么用：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> allRows;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string row;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (std<span style="color:#f92672">::</span>getline(myStream, row)) { <span style="color:#75715e">// read next line into row
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  allRows.push_back(std<span style="color:#f92672">::</span>move(row)); <span style="color:#75715e">// and move it to somewhere
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Customer</span> {
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>string name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">double</span> height; 
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> Customers <span style="color:#f92672">=</span> soa_vector<span style="color:#f92672">&lt;</span>Customer<span style="color:#f92672">&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Customers.emplace_back(<span style="color:#e6db74">&#34;example_name&#34;</span>, <span style="color:#ae81ff">173.6</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>tuple<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&amp;</span>, <span style="color:#66d9ef">double</span><span style="color:#f92672">&amp;</span> height<span style="color:#f92672">&gt;</span> Customers[<span style="color:#ae81ff">0</span>];
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
