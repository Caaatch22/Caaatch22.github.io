<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mlsys on Mingjie&#39;s Home</title>
    <link>https://caaatch22.github.io/tags/mlsys/</link>
    <description>Recent content in mlsys on Mingjie&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 20 Feb 2024 15:35:59 +0000</lastBuildDate><atom:link href="https://caaatch22.github.io/tags/mlsys/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TinyMl —— pruning</title>
      <link>https://caaatch22.github.io/posts/tinyml-pruning/</link>
      <pubDate>Tue, 20 Feb 2024 15:35:59 +0000</pubDate>
      
      <guid>https://caaatch22.github.io/posts/tinyml-pruning/</guid>
      <description>最近正在学习 MIT 6.5940, 韩松老师的课，做deep learning compression的应该都只知道。课程分为三个部分，efficient inference, domain-specific optimization, efficient training。有完整的课件，视频和实验。最后一个lab是将llama2部署在个人电脑上，非常有意思（谁不想要个自己的大模型呢）。其余lab也都可以白嫖google colab的gpu
Introduction 正式介绍pruning and sparsity之前，我们先来聊聊为什么要做model compression这个事情。 Today&amp;rsquo;s Model is Too Big!
随着Large language model的出现，如GPT-3，如今的模型参数量已经达到了上百billion，别说训练，我们甚至无法在一个gpu上对其进行推理。更别提如果我们想要将其部署在其他边缘设备上。
所以当前在做inference之前，一般都会有个model-compression的过程，包括pruning（剪枝），quantization（量化），distillation（蒸馏）等。这些方法都是为了减少模型的大小，加速推理过程。这些方法也被广泛地集成到了各种加速卡，gpu中。例如nv的A100就支持structured sparsity（[N:M]形式的，具体含义下文会详细介绍）。
Efficiency Metrics 我们再来看看一些 efficiency metrics，这也是我们在做inference过程中需要考虑的指标：
Memory-Related Metrics # parameters model size total/peak #activations Computation-Related Metrics MACs FLOP, FLOPs # parameters Model #Parameters Linear Layer(FC) $feature_{in} * feature_{out}$ Conv Layer $c_{i} * c_{o} * k_{h} * k_{w} $ Grouped Conv Layer $c_{i} * c_{o} * k_{h} * k_{w} / g$ Depthwise Conv Layer $c_{o} * k_{h} * k_{w}$ 其中，Grouped Conv指的是将输入在channel维度进行分组，然后分别进行卷积，最后concatenate。Depthwise Conv分组个数g等于输入channel数的情况。</description>
      <content:encoded><![CDATA[<blockquote>
<p>最近正在学习 <a href="https://hanlab.mit.edu/courses/2023-fall-65940">MIT 6.5940</a>, <a href="https://hanlab.mit.edu/songhan">韩松</a>老师的课，做deep learning compression的应该都只知道。课程分为三个部分，<strong>efficient inference, domain-specific optimization, efficient training</strong>。有完整的课件，视频和实验。最后一个lab是将llama2部署在个人电脑上，非常有意思（谁不想要个自己的大模型呢）。其余lab也都可以白嫖google colab的gpu</p>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>正式介绍pruning and sparsity之前，我们先来聊聊为什么要做model compression这个事情。
<img loading="lazy" src="/img/tinyml/todays-model-size.png" alt="todays-model-size"  />
</p>
<p><strong>Today&rsquo;s Model is Too Big!</strong></p>
<p>随着Large language model的出现，如GPT-3，如今的模型参数量已经达到了上百billion，别说训练，我们甚至无法在一个gpu上对其进行推理。更别提如果我们想要将其部署在其他边缘设备上。</p>
<p>所以当前在做inference之前，一般都会有个model-compression的过程，包括pruning（剪枝），quantization（量化），distillation（蒸馏）等。这些方法都是为了减少模型的大小，加速推理过程。这些方法也被广泛地集成到了各种加速卡，gpu中。例如nv的A100就支持structured sparsity（[N:M]形式的，具体含义下文会详细介绍）。</p>
<h3 id="efficiency-metrics">Efficiency Metrics</h3>
<p>我们再来看看一些 efficiency metrics，这也是我们在做inference过程中需要考虑的指标：</p>
<ul>
<li>Memory-Related Metrics
<ul>
<li># parameters</li>
<li>model size</li>
</ul>
</li>
<li>total/peak #activations</li>
<li>Computation-Related Metrics
<ul>
<li>MACs</li>
<li>FLOP, FLOPs</li>
</ul>
</li>
</ul>
<h4 id="-parameters"># parameters</h4>
<table>
<thead>
<tr>
<th>Model</th>
<th>#Parameters</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linear Layer(FC)</td>
<td>$feature_{in} * feature_{out}$</td>
</tr>
<tr>
<td>Conv Layer</td>
<td>$c_{i} * c_{o} * k_{h} * k_{w} $</td>
</tr>
<tr>
<td>Grouped Conv Layer</td>
<td>$c_{i} * c_{o} * k_{h} * k_{w} / g$</td>
</tr>
<tr>
<td>Depthwise Conv Layer</td>
<td>$c_{o} * k_{h} * k_{w}$</td>
</tr>
</tbody>
</table>
<p>其中，Grouped Conv指的是将输入在channel维度进行分组，然后分别进行卷积，最后concatenate。Depthwise Conv分组个数g等于输入channel数的情况。</p>
<p>除了这些weight外，还有bias以及norm相关的参数。
例如，对于batchnorm层，我们需要两个参数$\gamma,  \beta$以及runing mean和running variance。
$$
y = \gamma \frac{x - \mu}{\sqrt{\sigma^2 + \epsilon}} + \beta
$$</p>
<p>这都是针对infernece的情况，对于training，还需要考虑一些额外的参数，例如momentum，以及保存梯度等等。</p>
<h4 id="model-size">model size</h4>
<p>$$
Model Size = \# parameters * bitwidth
$$</p>
<p>举个例子，AlexNet有$61M$个参数，如果我们用32bit的float来表示，那么model size就是$61M * 4byte = 224MB$。但如果我们用8-bit来表示每个weight，那么model size就是$61M * 1byte = 61MB$。</p>
<p>这就是quantization的一个应用，通过减少bitwidth来减少model size。</p>
<h4 id="totalpeak-activations">total/peak #activations</h4>
<p>#activations 是模型在推理时在内存中需要存储的中间结果，这也可能成为内存瓶颈。如下图：
<img loading="lazy" src="/img/tinyml/mcunet-activations.png" alt="activation"  />
</p>
<p>图中是MCUNet(一个专门用在IoT设备上的模型)的参数量和activations数量对比resnet的减少。可以看出，参数的减少量十分显著，但是# activations不降反增，和param的占比是一个数量级的。所以我们若想在边缘设备上部署模型，需要考虑activations的数量。</p>
<h4 id="mac">MAC</h4>
<p><code>MAC</code>的含义是 <strong>Multiply-Accumulate operation</strong>。例如，一个gemm(genearl matrix multiplication)的$MACs = m * n * k$（对于m * k的矩阵和k * n的矩阵相乘）。深度学习中几乎90%的时间都在做gemm，一个conv2d操作也可以由im2col转换为gemm操作。</p>
<p>以下是常见的一些layer的MACs计算：</p>
<table>
<thead>
<tr>
<th>layer</th>
<th>MACs(batch size = 1)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linear</td>
<td>$feature_{in} * feature_{out}$</td>
</tr>
<tr>
<td>Conv</td>
<td>$c_{i}  * k_{h} * k_{w} * h_{o} * w_{o} * c_{o}$</td>
</tr>
<tr>
<td>grouped conv</td>
<td>$c_{i}/g * k_{h} * k_{w} * h_{o} * w_{o}* c_{o} $</td>
</tr>
<tr>
<td>depthwise conv</td>
<td>$c_{o} * k_{h} * k_{w} * h_{o} * w_{o}$</td>
</tr>
</tbody>
</table>
<h4 id="flop-and-flops">FLOP and FLOPs</h4>
<p>FLOP的意思是 <strong>Floating Point Operations</strong>，是指浮点运算的次数。FLOPs是指每秒的FLOP数量。
一般一个MAC对应两个FLOP，一乘一加。</p>
<h3 id="energy-consumption">Energy Consumption</h3>
<p>对于边缘设备，我们还需要考虑能耗的问题。
<img loading="lazy" src="/img/tinyml/memory-is-expensive.png" alt="energy-consumption"  />

图中可以看出，数据的移动消耗的能量是做运算的200倍以上。</p>
<h2 id="neural-network-pruning">neural network pruning</h2>
<p>那么，到底什么是模型剪枝（prune）呢？顾名思义，就是将模型中的一些参数去掉，或者更加细粒度的，我们可以把某些参数与参数之间的连接去掉。（但在实际操作中，我们都是直接减去某个参数而非减去参数之间的连接）</p>
<p><strong>注意：减去某个参数并不意味着单纯将其设置为0。<strong>因为我们剪枝的目的是</strong>减少内存使用</strong>以及<strong>加速推理</strong>，若只是讲某个$W$矩阵中的一些值变成0，并不能达到减少内存的目的。我们需要将剪枝后的参数$W_{p}$用特定的方式存储（例如，稀疏矩阵）以及结合特定的优化后的运算才能减少内存使用并加速。当然，从正确性的角度来说，将某些参数设置为0可以得到一样的结果。所以我们可以在确定 <em>sparsity</em> 时先将一定的参数置为0，然后再通过fine-tuning来确定剪去这么多的参数是否会影响模型最终的效果。</p>
<p><img loading="lazy" src="/img/tinyml/nnpruning.png" alt="pruning"  />
</p>
<p>减去一定的参数后，肯定会对我们的模型效果造成影响。这时候我们需要进行fine-tuning调整参数分布，具体会在后文展开。</p>
<p>形式化的定义prune：
<img loading="lazy" src="/img/tinyml/prune-formalized.png" alt="prune-formalized"  />
</p>
<h3 id="pruning-granularity">pruning granularity</h3>
<p>我们有不同的剪枝粒度，from unstructured to structured:
对于一个FC layer，其实就是将一个2d matrix进行剪枝：
<img loading="lazy" src="/img/tinyml/fc-prune.png" alt="fc-prune"  />

如图，细粒度的、不规则的剪枝一般能有更高的sparsity，但是却难以加速（就像上文说的，如果只是将一些参数设置为0，不会有任何内存与速度上的收益）。而粗粒度的剪枝，就可以不需要改变原有的矩阵结构获得更少的内存使用以及加速，但一般sparsity会高一些（同等accuracy下）。</p>
<p>对于卷积层，我们有更多的剪枝粒度：
<img loading="lazy" src="/img/tinyml/conv-prune.png" alt="conv-prune"  />

也是从完全不规则，到有一定的pattern，到vector-level，kernel-level再到剪去一个通道。优缺点如同上面分析的一般。
对于最fine-grained的剪枝，许多模型都可以达到剪去90%以上而不影响精度。
<img loading="lazy" src="/img/tinyml/fine-grained-prune-sparsity.png" alt="fine-grained-prune-sparsity"  />
</p>
<p>对于有一定pattern的剪枝，就需要设计特定的存储方式或者运算方式来加速。
例如下图的[N:M]剪枝（每M个参数剪去N个）就可以通过只存非0权重，以及一个下标数组的方式减少内存占用。nvdia的Ampere系列GPU就在其Tensor core内融合了这种优化，达到了2倍的加速效果
<img loading="lazy" src="/img/tinyml/pattern-grain-prune.png" alt="pattern-grain-prune"  />
</p>
<h3 id="pruning-criterion">pruning criterion</h3>
<h3 id="pruning-ratio">pruning ratio</h3>
<h3 id="fine-tuningtraining">fine-tuning/Training</h3>
<h2 id="system--hardware-support-for-sparsity">System &amp; Hardware Support for Sparsity</h2>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
